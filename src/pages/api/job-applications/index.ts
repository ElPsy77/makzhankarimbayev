import type { NextApiRequest, NextApiResponse } from 'next';
import nodemailer from 'nodemailer';
import { sendJobApplicationDb } from '@/features/jobForm/services/db/sendJobApplicationDb';
import { getAllJobApplicationsDb } from '@/services/db/getAllJobApplicationsDb';
import { JobApplicationData } from '@/types';

const sendConfirmationEmail = async (
   email: string,
   jobApplicationData: JobApplicationData,
) => {
   const transporter = nodemailer.createTransport({
      host: process.env.CONFIRMATION_MAIL_HOST,
      port: Number(process.env.CONFIRMATION_MAIL_PORT),
      secure: false,
      auth: {
         user: process.env.CONFIRMATION_MAIL_USER,
         pass: process.env.CONFIRMATION_MAIL_PASS,
      },
   });

   // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
   const applicationDetails = `
    –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

    –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É. –û–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –í–æ—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∫–∞–∑–∞–ª–∏:

    - –ò–º—è: ${jobApplicationData.name}
    - –ì–æ—Ä–æ–¥: ${jobApplicationData.town}
    - Email: ${jobApplicationData.email}
    - –¢–µ–ª–µ—Ñ–æ–Ω: ${jobApplicationData.phone}
    - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã: ${jobApplicationData.startJobDate}
    - –û–∂–∏–¥–∞–Ω–∏—è –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ: ${jobApplicationData.financialExpectations}
    - –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–ø–∞–Ω–∏—è: ${jobApplicationData.lastCompany}
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${jobApplicationData.isRecommendation ? '–î–∞' : '–ù–µ—Ç'}
    - –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${jobApplicationData.employeeName}
    - –°–æ–≥–ª–∞—Å–∏–µ: ${jobApplicationData.agreement ? '–î–∞' : '–ù–µ—Ç'}

    –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

    –° —É–≤–∞–∂–µ–Ω–∏–µ–º,  
    –ö–æ–º–∞–Ω–¥–∞ –Ø–†–∞–±–æ—Ç–∞
  `;

   const mailOptions = {
      from: `"–Ø–†–∞–±–æ—Ç–∞" <${process.env.CONFIRMATION_MAIL_USER}>`,
      to: email,
      subject: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
      text: applicationDetails,
   };

   console.log('Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', email);

   await transporter.sendMail(mailOptions);
};

export default async (req: NextApiRequest, res: NextApiResponse) => {
   switch (req.method) {
      case 'POST': {
         try {
            const jobApplicationData: JobApplicationData = req.body;
            console.log('üì¶ –ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ:', jobApplicationData); // –õ–æ–≥ –¥–∞–Ω–Ω—ã—Ö

            const result = await sendJobApplicationDb(jobApplicationData);

            if (!result) {
               console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î');
               return res
                  .status(500)
                  .json({ error: 'Failed to save job application' });
            }

            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');

            console.log(
               '–ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –Ω–∞:',
               jobApplicationData.email,
            );
            await sendConfirmationEmail(
               jobApplicationData.email,
               jobApplicationData,
            );

            return res.status(200).json({ success: true });
         } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ POST:', err);
            return res.status(500).json({ error: 'Internal server error' });
         }
      }

      case 'GET': {
         try {
            const jobApplications = await getAllJobApplicationsDb();

            return res.status(200).json({ jobApplications });
         } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', err);
            return res
               .status(500)
               .json({ error: 'Failed to fetch job applications' });
         }
      }

      default:
         return res.status(405).json({ error: 'Method Not Allowed' });
   }
};

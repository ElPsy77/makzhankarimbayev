import type { NextApiRequest, NextApiResponse } from 'next';
import { sendJobApplicationDb } from '@/features/jobForm/services/db/sendJobApplicationDb';
import { JobApplicationData } from '@/types';
import { getAllJobApplicationsDb } from '@/services/db/getAllJobApplicationsDb';

export default async (req: NextApiRequest, res: NextApiResponse) => {
   switch (req.method) {
      case 'POST': {
         try {
            const jobApplicationData: JobApplicationData = req.body;
            console.log('üì¶ –ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ:', jobApplicationData); // –õ–æ–≥ –¥–∞–Ω–Ω—ã—Ö

            const result = await sendJobApplicationDb(jobApplicationData);

            if (!result) {
               console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î');
               return res
                  .status(500)
                  .json({ error: 'Failed to save job application' });
            }

            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');
            return res.status(200).json({ success: true });
         } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ POST:', err);
            return res.status(500).json({ error: 'Internal server error' });
         }
      }

      case 'GET': {
         try {
            const jobApplications = await getAllJobApplicationsDb();

            return res.status(200).json({ jobApplications });
         } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', err);
            return res.status(500).json({ error: 'Failed to fetch job applications' });
         }
      }

      default:
         return res.status(405).json({ error: 'Method Not Allowed' });
   }
};
